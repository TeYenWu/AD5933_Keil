# 1 "Library\\StdDriver\\src\\can.c"
 








 
# 1 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 








 
 
 



 





 

typedef enum IRQn
{
     
    NonMaskableInt_IRQn           = -14,       
    MemoryManagement_IRQn         = -12,       
    BusFault_IRQn                 = -11,       
    UsageFault_IRQn               = -10,       
    SVCall_IRQn                   = -5,        
    DebugMonitor_IRQn             = -4,        
    PendSV_IRQn                   = -2,        
    SysTick_IRQn                  = -1,        

     

    BOD_IRQn                      = 0,         
    IRC_IRQn                      = 1,         
    PWRWU_IRQn                    = 2,         
    RAMPE_IRQn                    = 3,         
    CKFAIL_IRQn                   = 4,         
    RTC_IRQn                      = 6,         
    TAMPER_IRQn                   = 7,         
    WDT_IRQn                      = 8,         
    WWDT_IRQn                     = 9,         
    EINT0_IRQn                    = 10,        
    EINT1_IRQn                    = 11,        
    EINT2_IRQn                    = 12,        
    EINT3_IRQn                    = 13,        
    EINT4_IRQn                    = 14,        
    EINT5_IRQn                    = 15,        
    GPA_IRQn                      = 16,        
    GPB_IRQn                      = 17,        
    GPC_IRQn                      = 18,        
    GPD_IRQn                      = 19,        
    GPE_IRQn                      = 20,        
    GPF_IRQn                      = 21,        
    SPI0_IRQn                     = 22,        
    SPI1_IRQn                     = 23,        
    BRAKE0_IRQn                   = 24,        
    PWM0P0_IRQn                   = 25,        
    PWM0P1_IRQn                   = 26,        
    PWM0P2_IRQn                   = 27,        
    BRAKE1_IRQn                   = 28,        
    PWM1P0_IRQn                   = 29,        
    PWM1P1_IRQn                   = 30,        
    PWM1P2_IRQn                   = 31,        
    TMR0_IRQn                     = 32,        
    TMR1_IRQn                     = 33,        
    TMR2_IRQn                     = 34,        
    TMR3_IRQn                     = 35,        
    UART0_IRQn                    = 36,        
    UART1_IRQn                    = 37,        
    I2C0_IRQn                     = 38,        
    I2C1_IRQn                     = 39,        
    PDMA_IRQn                     = 40,        
    DAC_IRQn                      = 41,        
    ADC00_IRQn                    = 42,        
    ADC01_IRQn                    = 43,        
    ACMP01_IRQn                   = 44,        
    ADC02_IRQn                    = 46,        
    ADC03_IRQn                    = 47,        
    UART2_IRQn                    = 48,        
    UART3_IRQn                    = 49,        
    SPI2_IRQn                     = 51,        
    USBD_IRQn                     = 53,        
    USBH_IRQn                     = 54,        
    USBOTG_IRQn                   = 55,        
    CAN0_IRQn                     = 56,        
    SC0_IRQn                      = 58,        
    TK_IRQn                       = 63         
} IRQn_Type;






 

 






   

# 1 "Library\\CMSIS\\Include\\core_cm4.h"
 




















 






















 




 


 

 













# 89 "Library\\CMSIS\\Include\\core_cm4.h"


 
# 103 "Library\\CMSIS\\Include\\core_cm4.h"

# 152 "Library\\CMSIS\\Include\\core_cm4.h"

# 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
# 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











# 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
# 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



# 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











# 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
# 154 "Library\\CMSIS\\Include\\core_cm4.h"
# 1 "Library\\CMSIS\\Include\\core_cmInstr.h"
 




















 





 



 


 









 







 







 






 








 







 







 









 









 
__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}








 
__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}









 











 









 









 









 











 











 











 







 










 










 









 






# 615 "Library\\CMSIS\\Include\\core_cmInstr.h"

   

# 155 "Library\\CMSIS\\Include\\core_cm4.h"
# 1 "Library\\CMSIS\\Include\\core_cmFunc.h"
 




















 





 



 


 





 
 






 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}







 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}







 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}







 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}







 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}







 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}







 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}







 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}







 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}







 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}







 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}








 







 








 
static __inline uint32_t  __get_BASEPRI(void)
{
  register uint32_t __regBasePri         __asm("basepri");
  return(__regBasePri);
}







 
static __inline void __set_BASEPRI(uint32_t basePri)
{
  register uint32_t __regBasePri         __asm("basepri");
  __regBasePri = (basePri & 0xff);
}







 
static __inline uint32_t __get_FAULTMASK(void)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  return(__regFaultMask);
}







 
static __inline void __set_FAULTMASK(uint32_t faultMask)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  __regFaultMask = (faultMask & (uint32_t)1);
}











 
static __inline uint32_t __get_FPSCR(void)
{

  register uint32_t __regfpscr         __asm("fpscr");
  return(__regfpscr);



}







 
static __inline void __set_FPSCR(uint32_t fpscr)
{

  register uint32_t __regfpscr         __asm("fpscr");
  __regfpscr = (fpscr);

}




# 612 "Library\\CMSIS\\Include\\core_cmFunc.h"

 


# 156 "Library\\CMSIS\\Include\\core_cm4.h"
# 1 "Library\\CMSIS\\Include\\core_cm4_simd.h"
 




















 











 


 



 


 

 
# 106 "Library\\CMSIS\\Include\\core_cm4_simd.h"








 



# 641 "Library\\CMSIS\\Include\\core_cm4_simd.h"

 




# 157 "Library\\CMSIS\\Include\\core_cm4.h"








 
# 192 "Library\\CMSIS\\Include\\core_cm4.h"

 






 
# 208 "Library\\CMSIS\\Include\\core_cm4.h"

 













 


 





 


 
typedef union
{
  struct
  {



    uint32_t _reserved0:16;               
    uint32_t GE:4;                        
    uint32_t _reserved1:7;                

    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} APSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:23;               
  } b;                                    
  uint32_t w;                             
} IPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       



    uint32_t _reserved0:7;                
    uint32_t GE:4;                        
    uint32_t _reserved1:4;                

    uint32_t T:1;                         
    uint32_t IT:2;                        
    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} xPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t nPRIV:1;                     
    uint32_t SPSEL:1;                     
    uint32_t FPCA:1;                      
    uint32_t _reserved0:29;               
  } b;                                    
  uint32_t w;                             
} CONTROL_Type;

 






 


 
typedef struct
{
  volatile uint32_t ISER[8];                  
       uint32_t RESERVED0[24];
  volatile uint32_t ICER[8];                  
       uint32_t RSERVED1[24];
  volatile uint32_t ISPR[8];                  
       uint32_t RESERVED2[24];
  volatile uint32_t ICPR[8];                  
       uint32_t RESERVED3[24];
  volatile uint32_t IABR[8];                  
       uint32_t RESERVED4[56];
  volatile uint8_t  IP[240];                  
       uint32_t RESERVED5[644];
  volatile  uint32_t STIR;                     
}  NVIC_Type;

 



 






 


 
typedef struct
{
  volatile const  uint32_t CPUID;                    
  volatile uint32_t ICSR;                     
  volatile uint32_t VTOR;                     
  volatile uint32_t AIRCR;                    
  volatile uint32_t SCR;                      
  volatile uint32_t CCR;                      
  volatile uint8_t  SHP[12];                  
  volatile uint32_t SHCSR;                    
  volatile uint32_t CFSR;                     
  volatile uint32_t HFSR;                     
  volatile uint32_t DFSR;                     
  volatile uint32_t MMFAR;                    
  volatile uint32_t BFAR;                     
  volatile uint32_t AFSR;                     
  volatile const  uint32_t PFR[2];                   
  volatile const  uint32_t DFR;                      
  volatile const  uint32_t ADR;                      
  volatile const  uint32_t MMFR[4];                  
  volatile const  uint32_t ISAR[5];                  
       uint32_t RESERVED0[5];
  volatile uint32_t CPACR;                    
} SCB_Type;

 















 






























 



 





















 









 


















 










































 









 









 















 






 


 
typedef struct
{
       uint32_t RESERVED0[1];
  volatile const  uint32_t ICTR;                     
  volatile uint32_t ACTLR;                    
} SCnSCB_Type;

 



 















 






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t LOAD;                     
  volatile uint32_t VAL;                      
  volatile const  uint32_t CALIB;                    
} SysTick_Type;

 












 



 



 









 






 


 
typedef struct
{
  volatile  union
  {
    volatile  uint8_t    u8;                   
    volatile  uint16_t   u16;                  
    volatile  uint32_t   u32;                  
  }  PORT [32];                           
       uint32_t RESERVED0[864];
  volatile uint32_t TER;                      
       uint32_t RESERVED1[15];
  volatile uint32_t TPR;                      
       uint32_t RESERVED2[15];
  volatile uint32_t TCR;                      
       uint32_t RESERVED3[29];                                  
  volatile  uint32_t IWR;                      
  volatile const  uint32_t IRR;                      
  volatile uint32_t IMCR;                     
       uint32_t RESERVED4[43];                                  
  volatile  uint32_t LAR;                      
  volatile const  uint32_t LSR;                      
       uint32_t RESERVED5[6];                                   
  volatile const  uint32_t PID4;                     
  volatile const  uint32_t PID5;                     
  volatile const  uint32_t PID6;                     
  volatile const  uint32_t PID7;                     
  volatile const  uint32_t PID0;                     
  volatile const  uint32_t PID1;                     
  volatile const  uint32_t PID2;                     
  volatile const  uint32_t PID3;                     
  volatile const  uint32_t CID0;                     
  volatile const  uint32_t CID1;                     
  volatile const  uint32_t CID2;                     
  volatile const  uint32_t CID3;                     
} ITM_Type;

 



 



























 



 



 



 









   






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t CYCCNT;                   
  volatile uint32_t CPICNT;                   
  volatile uint32_t EXCCNT;                   
  volatile uint32_t SLEEPCNT;                 
  volatile uint32_t LSUCNT;                   
  volatile uint32_t FOLDCNT;                  
  volatile const  uint32_t PCSR;                     
  volatile uint32_t COMP0;                    
  volatile uint32_t MASK0;                    
  volatile uint32_t FUNCTION0;                
       uint32_t RESERVED0[1];
  volatile uint32_t COMP1;                    
  volatile uint32_t MASK1;                    
  volatile uint32_t FUNCTION1;                
       uint32_t RESERVED1[1];
  volatile uint32_t COMP2;                    
  volatile uint32_t MASK2;                    
  volatile uint32_t FUNCTION2;                
       uint32_t RESERVED2[1];
  volatile uint32_t COMP3;                    
  volatile uint32_t MASK3;                    
  volatile uint32_t FUNCTION3;                
} DWT_Type;

 






















































 



 



 



 



 



 



 



























   






 


 
typedef struct
{
  volatile uint32_t SSPSR;                    
  volatile uint32_t CSPSR;                    
       uint32_t RESERVED0[2];
  volatile uint32_t ACPR;                     
       uint32_t RESERVED1[55];
  volatile uint32_t SPPR;                     
       uint32_t RESERVED2[131];
  volatile const  uint32_t FFSR;                     
  volatile uint32_t FFCR;                     
  volatile const  uint32_t FSCR;                     
       uint32_t RESERVED3[759];
  volatile const  uint32_t TRIGGER;                  
  volatile const  uint32_t FIFO0;                    
  volatile const  uint32_t ITATBCTR2;                
       uint32_t RESERVED4[1];
  volatile const  uint32_t ITATBCTR0;                
  volatile const  uint32_t FIFO1;                    
  volatile uint32_t ITCTRL;                   
       uint32_t RESERVED5[39];
  volatile uint32_t CLAIMSET;                 
  volatile uint32_t CLAIMCLR;                 
       uint32_t RESERVED7[8];
  volatile const  uint32_t DEVID;                    
  volatile const  uint32_t DEVTYPE;                  
} TPI_Type;

 



 



 












 






 



 





















 



 





















 



 



 


















 






   







 


 
typedef struct
{
  volatile const  uint32_t TYPE;                     
  volatile uint32_t CTRL;                     
  volatile uint32_t RNR;                      
  volatile uint32_t RBAR;                     
  volatile uint32_t RASR;                     
  volatile uint32_t RBAR_A1;                  
  volatile uint32_t RASR_A1;                  
  volatile uint32_t RBAR_A2;                  
  volatile uint32_t RASR_A2;                  
  volatile uint32_t RBAR_A3;                  
  volatile uint32_t RASR_A3;                  
} MPU_Type;

 









 









 



 









 






























 








 


 
typedef struct
{
       uint32_t RESERVED0[1];
  volatile uint32_t FPCCR;                    
  volatile uint32_t FPCAR;                    
  volatile uint32_t FPDSCR;                   
  volatile const  uint32_t MVFR0;                    
  volatile const  uint32_t MVFR1;                    
} FPU_Type;

 



























 



 












 
























 












 







 


 
typedef struct
{
  volatile uint32_t DHCSR;                    
  volatile  uint32_t DCRSR;                    
  volatile uint32_t DCRDR;                    
  volatile uint32_t DEMCR;                    
} CoreDebug_Type;

 




































 






 







































 






 

 
# 1366 "Library\\CMSIS\\Include\\core_cm4.h"

# 1375 "Library\\CMSIS\\Include\\core_cm4.h"











 










 

 



 




 










 
static __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);                

  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << 16) |
                (PriorityGroupTmp << 8));                                      
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
}







 
static __inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) >> 8);    
}







 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));  
}







 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}











 
static __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}







 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}







 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}










 
static __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}










 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }  
  else {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff);    }         
}












 
static __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4)));  }  
  else {
    return((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)]           >> (8 - 4)));  }  
}













 
static __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}













 
static __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
}





 
static __inline void NVIC_SystemReset(void)
{
  __dsb(0xF);                                                     
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FA << 16)      |
                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) |
                 (1UL << 2));                    
  __dsb(0xF);                                                      
  while(1);                                                     
}

 



 




 

















 
static __inline uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > (0xFFFFFFUL << 0))  return (1);             

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (ticks & (0xFFFFFFUL << 0)) - 1;       
  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);   
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0;                                           
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2) |
                   (1UL << 1)   |
                   (1UL << 0);                     
  return (0);                                                   
}



 



 




 

extern volatile int32_t ITM_RxBuffer;                     












 
static __inline uint32_t ITM_SendChar (uint32_t ch)
{
  if ((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL << 0))                  &&       
      (((ITM_Type *) (0xE0000000UL) )->TER & (1UL << 0)        )                    )      
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000UL) )->PORT[0].u8 = (uint8_t) ch;
  }
  return (ch);
}








 
static __inline int32_t ITM_ReceiveChar (void) {
  int32_t ch = -1;                            

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;        
  }

  return (ch);
}








 
static __inline int32_t ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);                                  
  } else {
    return (1);                                  
  }
}

 





# 141 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"









 








# 20 "Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"

 
 
 







 

# 39 "Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"




extern uint32_t SystemCoreClock;      
extern uint32_t CyclesPerUs;          
extern uint32_t PllClock;             










 
extern void SystemInit(void);









 
extern void SystemCoreClockUpdate(void);






 
# 142 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 143 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"



 
 
 





 


 



 


typedef struct
{












































































































































 

    volatile uint32_t CTL[2];         
    volatile uint32_t STATUS;         
    volatile uint32_t VREF;           

} ACMP_T;






 























































   
   


 



 


typedef struct
{

































































































































































































































































































































































































































































































































































 

    volatile const  uint32_t DAT[19];        
    volatile const  uint32_t CURDAT;         
    volatile uint32_t CTL;            
    volatile  uint32_t SWTRG;          
    volatile uint32_t PENDSTS;        
    volatile uint32_t OVSTS;          
    volatile const  uint32_t RESERVE0[8];  
    volatile uint32_t SCTL[19];       
    volatile const  uint32_t RESERVE1[1];  
    volatile uint32_t INTSRC[4];      
    volatile uint32_t CMP[4];         
    volatile const  uint32_t STATUS0;        
    volatile const  uint32_t STATUS1;        
    volatile uint32_t STATUS2;        
    volatile const  uint32_t STATUS3;        
    volatile const  uint32_t DDAT[4];        

} EADC_T;






 

































































































































































































   
   


 



 


typedef struct
{



























































































































































































































 

    volatile uint32_t CREQ;           
    volatile uint32_t CMASK;          
    volatile uint32_t MASK1;          
    volatile uint32_t MASK2;          
    volatile uint32_t ARB1;           
    volatile uint32_t ARB2;           
    volatile uint32_t MCON;           
    volatile uint32_t DAT_A1;         
    volatile uint32_t DAT_A2;         
    volatile uint32_t DAT_B1;         
    volatile uint32_t DAT_B2;         
    volatile const  uint32_t RESERVE0[13];

} CAN_IF_T;




typedef struct
{





































































































































































































































 

    volatile uint32_t CON;            
    volatile uint32_t STATUS;         
    volatile const  uint32_t ERR;            
    volatile uint32_t BTIME;          
    volatile const  uint32_t IIDR;           
    volatile uint32_t TEST;           
    volatile uint32_t BRPE;           
    volatile const  uint32_t RESERVE0[1];  
    volatile CAN_IF_T IF[2];          
    volatile const  uint32_t RESERVE1[8];  
    volatile const  uint32_t TXREQ1;         
    volatile const  uint32_t TXREQ2;         
    volatile const  uint32_t RESERVE3[6];  
    volatile const  uint32_t NDAT1;          
    volatile const  uint32_t NDAT2;          
    volatile const  uint32_t RESERVE4[6];  
    volatile const  uint32_t IPND1;          
    volatile const  uint32_t IPND2;          
    volatile const  uint32_t RESERVE5[6];  
    volatile const  uint32_t MVLD1;          
    volatile const  uint32_t MVLD2;          
    volatile uint32_t WU_EN;          
    volatile uint32_t WU_STATUS;      

} CAN_T;






 
 


                                                                                


                                                             


                                                             


                                                             


                                                             


                                                             



 


















                                              









                                            












                                             



                                             















                                            



 


                                                                                  


                                                                                  
                                          


                                                                                  


                                                                                  


















 



                                        









                                         



                                         












                                         






























                                      






                                      






                                      






                                      






 



                                          



                                            



                                           



                                           



                                           



                                           



                                            



                                                 



 




   
   


 



 


typedef struct
{






















































































































































































































































































































































































































































































 

    volatile uint32_t PWRCTL;         
    volatile uint32_t AHBCLK;         
    volatile uint32_t APBCLK0;        
    volatile uint32_t APBCLK1;        
    volatile uint32_t CLKSEL0;        
    volatile uint32_t CLKSEL1;        
    volatile uint32_t CLKSEL2;        
    volatile uint32_t CLKSEL3;        
    volatile uint32_t CLKDIV0;        
    volatile uint32_t CLKDIV1;        
    volatile const  uint32_t RESERVE0[6];  
    volatile uint32_t PLLCTL;         
    volatile const  uint32_t RESERVE1[3];  
    volatile const  uint32_t STATUS;         
    volatile const  uint32_t RESERVE2[3];  
    volatile uint32_t CLKOCTL;        
    volatile const  uint32_t RESERVE3[3];  
    volatile uint32_t CLKDCTL;        
    volatile uint32_t CLKDSTS;        
    volatile uint32_t CDUPB;          
    volatile uint32_t CDLOWB;         

} CLK_T;






 


































































































































































































































































































   
   



 



 


typedef struct
{







































































 

    volatile uint32_t CTL;            
    volatile uint32_t DAT;            
    volatile uint32_t SEED;           
    volatile const  uint32_t CHECKSUM;       

} CRC_T;






 


































   
   


 



 


typedef struct
{


































































































 

    volatile uint32_t CTL;            
    volatile uint32_t SWTRG;          
    volatile uint32_t DAT;            
    volatile const  uint32_t DATOUT;         
    volatile uint32_t STATUS;         
    volatile uint32_t TCTL;           

} DAC_T;






 

















































   
   


 



 


typedef struct
{





























































































































 

    volatile uint32_t CTL0;           
    volatile uint32_t TCTL0;          
    volatile const  uint32_t RESERVE0[2];  
    volatile uint32_t CTL1;           
    volatile uint32_t TCTL1;          

} EBI_T;






 









































































   
   


 



 


typedef struct
{













































































































































































































































 

    volatile uint32_t ISPCTL;         
    volatile uint32_t ISPADDR;        
    volatile uint32_t ISPDAT;         
    volatile uint32_t ISPCMD;         
    volatile uint32_t ISPTRG;         
    volatile const  uint32_t DFBA;           
    volatile uint32_t FTCTL;          
    volatile const  uint32_t RESERVE0[9];  
    volatile const  uint32_t ISPSTS;         
    volatile const  uint32_t RESERVE1[15]; 
    volatile uint32_t MPDAT0;         
    volatile uint32_t MPDAT1;         
    volatile uint32_t MPDAT2;         
    volatile uint32_t MPDAT3;         
    volatile const  uint32_t RESERVE2[12]; 
    volatile const  uint32_t MPSTS;          
    volatile const  uint32_t MPADDR;         

} FMC_T;







 






























































































   
   


 



 


typedef struct
{





















































































































































































 

    volatile uint32_t MODE;           
    volatile uint32_t DINOFF;         
    volatile uint32_t DOUT;           
    volatile uint32_t DATMSK;         
    volatile const  uint32_t PIN;            
    volatile uint32_t DBEN;           
    volatile uint32_t INTTYPE;        
    volatile uint32_t INTEN;          
    volatile uint32_t INTSRC;         
    volatile uint32_t SMTEN;          
    volatile uint32_t SLEWCTL;        
    volatile uint32_t DRVCTL;         

} GPIO_T;




typedef struct
{

































 

    volatile uint32_t DBCTL;          

} GPIO_DBCTL_T;







 





























































































































































































































































































































































































































































































































































































































   
   


 



 


typedef struct
{











































































































































































































































































































































































 

    volatile uint32_t CTL;            
    volatile uint32_t ADDR0;          
    volatile uint32_t DAT;            
    volatile const  uint32_t STATUS;         
    volatile uint32_t CLKDIV;         
    volatile uint32_t TOCTL;          
    volatile uint32_t ADDR1;          
    volatile uint32_t ADDR2;          
    volatile uint32_t ADDR3;          
    volatile uint32_t ADDRMSK0;       
    volatile uint32_t ADDRMSK1;       
    volatile uint32_t ADDRMSK2;       
    volatile uint32_t ADDRMSK3;       
    volatile const  uint32_t RESERVE0[2];  
    volatile uint32_t WKCTL;          
    volatile uint32_t WKSTS;          
    volatile uint32_t BUSCTL;         
    volatile uint32_t BUSTCTL;        
    volatile uint32_t BUSSTS;         
    volatile uint32_t PKTSIZE;        
    volatile const  uint32_t PKTCRC;         
    volatile uint32_t BUSTOUT;        
    volatile uint32_t CLKTOUT;        

} I2C_T;






 







































































































































































   
   

 



 


typedef struct
{




















































































































































































































 

    volatile uint32_t CTL;            
    volatile uint32_t PHYCTL;         
    volatile uint32_t INTEN;          
    volatile uint32_t INTSTS;         
    volatile const  uint32_t STATUS;         

} OTG_T;






 




























































































































   
   


 



 


typedef struct
{













































































 

    volatile uint32_t CTL;            
    volatile uint32_t SA;             
    volatile uint32_t DA;             
    volatile uint32_t NEXT;           

} DSCT_T;




typedef struct
{































































































































































































































































































































 
    
    DSCT_T        DSCT[12];                    
    volatile const  uint32_t CURSCAT[12];                                                                                                      
    volatile const  uint32_t RESERVE0[196];       
    volatile uint32_t CHCTL;                       
    volatile  uint32_t STOP;                        
    volatile  uint32_t SWREQ;                       
    volatile const  uint32_t TRGSTS;                      
    volatile uint32_t PRISET;                      
    volatile  uint32_t PRICLR;                      
    volatile uint32_t INTEN;                       
    volatile uint32_t INTSTS;                      
    volatile uint32_t ABTSTS;                      
    volatile uint32_t TDSTS;                       
    volatile uint32_t SCATSTS;                     
    volatile const  uint32_t TACTSTS;                                                                                                          
    volatile const  uint32_t RESERVE1[1];                 
    volatile uint32_t TOUTEN;                      
    volatile uint32_t TOUTIEN;                     
    volatile uint32_t SCATBA;                      
    volatile uint32_t TOC0_1;                      
    volatile uint32_t TOC2_3;                      
    volatile uint32_t TOC4_5;                      
    volatile uint32_t TOC6_7;                                                                                                           
    volatile const  uint32_t RESERVE2[12];                
    volatile uint32_t REQSEL0_3;                   
    volatile uint32_t REQSEL4_7;                   
    volatile uint32_t REQSEL8_11;     

} PDMA_T;






 























































































































































   
   


 



 


typedef struct
{






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 

    volatile uint32_t CTL0;           
    volatile uint32_t CTL1;           
    volatile uint32_t SYNC;           
    volatile uint32_t SWSYNC;         
    volatile uint32_t CLKSRC;         
    volatile uint32_t CLKPSC0_1;      
    volatile uint32_t CLKPSC2_3;      
    volatile uint32_t CLKPSC4_5;      
    volatile uint32_t CNTEN;          
    volatile uint32_t CNTCLR;         
    volatile uint32_t LOAD;           
    volatile const  uint32_t RESERVE0[1];  
    volatile uint32_t PERIOD[6];      
    volatile const  uint32_t RESERVE1[2];  
    volatile uint32_t CMPDAT[6];      
    volatile const  uint32_t RESERVE2[2];  
    volatile uint32_t DTCTL0_1;       
    volatile uint32_t DTCTL2_3;       
    volatile uint32_t DTCTL4_5;       
    volatile const  uint32_t RESERVE3[1];  
    volatile uint32_t PHS0_1;         
    volatile uint32_t PHS2_3;         
    volatile uint32_t PHS4_5;         
    volatile const  uint32_t RESERVE4[1];  
    volatile const  uint32_t CNT[6];         
    volatile const  uint32_t RESERVE5[2];  
    volatile uint32_t WGCTL0;         
    volatile uint32_t WGCTL1;         
    volatile uint32_t MSKEN;          
    volatile uint32_t MSK;            
    volatile uint32_t BNF;            
    volatile uint32_t FAILBRK;        
    volatile uint32_t BRKCTL0_1;      
    volatile uint32_t BRKCTL2_3;      
    volatile uint32_t BRKCTL4_5;      
    volatile uint32_t POLCTL;         
    volatile uint32_t POEN;           
    volatile  uint32_t SWBRK;          
    volatile uint32_t INTEN0;         
    volatile uint32_t INTEN1;         
    volatile uint32_t INTSTS0;        
    volatile uint32_t INTSTS1;        
    volatile uint32_t IFA;            
    volatile uint32_t DACTRGEN;       
    volatile uint32_t EADCTS0;        
    volatile uint32_t EADCTS1;        
    volatile uint32_t FTCMPDAT0_1;    
    volatile uint32_t FTCMPDAT2_3;    
    volatile uint32_t FTCMPDAT4_5;    
    volatile const  uint32_t RESERVE6[1];  
    volatile uint32_t SSCTL;          
    volatile  uint32_t SSTRG;          
    volatile const  uint32_t RESERVE7[2];  
    volatile uint32_t STATUS;         
    volatile const  uint32_t RESERVE8[55]; 
    volatile uint32_t CAPINEN;        
    volatile uint32_t CAPCTL;         
    volatile const  uint32_t CAPSTS;         
    volatile const  uint32_t RCAPDAT0;       
    volatile const  uint32_t FCAPDAT0;       
    volatile const  uint32_t RCAPDAT1;       
    volatile const  uint32_t FCAPDAT1;       
    volatile const  uint32_t RCAPDAT2;       
    volatile const  uint32_t FCAPDAT2;       
    volatile const  uint32_t RCAPDAT3;       
    volatile const  uint32_t FCAPDAT3;       
    volatile const  uint32_t RCAPDAT4;       
    volatile const  uint32_t FCAPDAT4;       
    volatile const  uint32_t RCAPDAT5;       
    volatile const  uint32_t FCAPDAT5;       
    volatile uint32_t PDMACTL;        
    volatile const  uint32_t PDMACAP0_1;     
    volatile const  uint32_t PDMACAP2_3;     
    volatile const  uint32_t PDMACAP4_5;     
    volatile const  uint32_t RESERVE9[1];  
    volatile uint32_t CAPIEN;         
    volatile uint32_t CAPIF;          
    volatile const  uint32_t RESERVE10[43];
    volatile const  uint32_t PBUF[6];        
    volatile const  uint32_t CMPBUF[6];      
    volatile const  uint32_t RESERVE11[3]; 
    volatile const  uint32_t FTCBUF0_1;      
    volatile const  uint32_t FTCBUF2_3;      
    volatile const  uint32_t FTCBUF4_5;      
    volatile uint32_t FTCI;           

} PWM_T;






 
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































   
   


 



 


typedef struct
{























































































































































































































































































































 

    volatile uint32_t INIT;           
    volatile  uint32_t RWEN;           
    volatile uint32_t FREQADJ;        
    volatile uint32_t TIME;           
    volatile uint32_t CAL;            
    volatile uint32_t CLKFMT;         
    volatile uint32_t WEEKDAY;        
    volatile uint32_t TALM;           
    volatile uint32_t CALM;           
    volatile const  uint32_t LEAPYEAR;       
    volatile uint32_t INTEN;          
    volatile uint32_t INTSTS;         
    volatile uint32_t TICK;           
    volatile uint32_t TAMSK;          
    volatile uint32_t CAMSK;          
    volatile uint32_t SPRCTL;         
    volatile uint32_t SPR[20];        
    volatile const  uint32_t RESERVE0[28]; 
    volatile uint32_t LXTCTL;         
    volatile uint32_t LXTOCTL;        
    volatile uint32_t LXTICTL;        
    volatile uint32_t TAMPCTL;        

} RTC_T;






 



















































































































































































































   
   


 



 


typedef struct
{






















































































































































































































































































































































































































































































































































































































 

    volatile uint32_t DAT;            
    volatile uint32_t CTL;            
    volatile uint32_t ALTCTL;         
    volatile uint32_t EGT;            
    volatile uint32_t RXTOUT;         
    volatile uint32_t ETUCTL;         
    volatile uint32_t INTEN;          
    volatile uint32_t INTSTS;         
    volatile uint32_t STATUS;         
    volatile uint32_t PINCTL;         
    volatile uint32_t TMRCTL0;        
    volatile uint32_t TMRCTL1;        
    volatile uint32_t TMRCTL2;        
    volatile uint32_t UARTCTL;        
    volatile const  uint32_t TMRDAT0;        
    volatile const  uint32_t TMRDAT1_2;      

} SC_T;






 

























































































































































































































































































































   
   


 



 


typedef struct
{












































































































































































































































































































































































































































































 

    volatile uint32_t CTL;            
    volatile uint32_t CLKDIV;         
    volatile uint32_t SSCTL;          
    volatile uint32_t PDMACTL;        
    volatile uint32_t FIFOCTL;        
    volatile uint32_t STATUS;         
    volatile const  uint32_t RESERVE0[2];  
    volatile  uint32_t TX;             
    volatile const  uint32_t RESERVE1[3];  
    volatile const  uint32_t RX;             
    volatile const  uint32_t RESERVE2[11]; 
    volatile uint32_t I2SCTL;         
    volatile uint32_t I2SCLK;         
    volatile uint32_t I2SSTS;         

} SPI_T;






 




































































































































































































































































































   
   


 



 


typedef struct
{











































































































































































































































































































































































































































































































































































































































































 

    volatile const  uint32_t PDID;           
    volatile uint32_t RSTSTS;         
    volatile uint32_t IPRST0;         
    volatile uint32_t IPRST1;         
    volatile uint32_t IPRST2;         
    volatile const  uint32_t RESERVE0[1];  
    volatile uint32_t BODCTL;         
    volatile uint32_t IVSCTL;         
    volatile const  uint32_t RESERVE1[1];  
    volatile uint32_t PORCTL;         
    volatile uint32_t VREFCTL;        
    volatile uint32_t USBPHY;         
    volatile uint32_t GPA_MFPL;       
    volatile uint32_t GPA_MFPH;       
    volatile uint32_t GPB_MFPL;       
    volatile uint32_t GPB_MFPH;       
    volatile uint32_t GPC_MFPL;       
    volatile uint32_t GPC_MFPH;       
    volatile uint32_t GPD_MFPL;       
    volatile uint32_t GPD_MFPH;       
    volatile uint32_t GPE_MFPL;       
    volatile uint32_t GPE_MFPH;       
    volatile uint32_t GPF_MFPL;       
    volatile const  uint32_t RESERVE2[25]; 
    volatile uint32_t SRAM_INTCTL;    
    volatile const  uint32_t SRAM_STATUS;    
    volatile const  uint32_t SRAM_ERRADDR;   
    volatile const  uint32_t RESERVE3[1];  
    volatile uint32_t SRAM_BISTCTL;   
    volatile const  uint32_t SRAM_BISTSTS;   
    volatile const  uint32_t RESERVE4[6];  
    volatile uint32_t IRCTCTL;        
    volatile uint32_t IRCTIEN;        
    volatile uint32_t IRCTISTS;       
    volatile const  uint32_t RESERVE5[1];  
    volatile uint32_t REGLCTL;        

} SYS_T;






 




























































































































































































































































































































































































































































































































   


typedef struct
{





















































































































 

    volatile  uint32_t NMIEN;           
    volatile const   uint32_t NMISTS;          

} SYS_INT_T;






 



























































































   
   


 



 


typedef struct
{


















































































































































































































































































































































































































































































































































































































 

    volatile uint32_t CTL;            
    volatile uint32_t REFCTL;         
    volatile uint32_t CCBDAT0;        
    volatile uint32_t CCBDAT1;        
    volatile uint32_t CCBDAT2;        
    volatile uint32_t CCBDAT3;        
    volatile uint32_t CCBDAT4;        
    volatile uint32_t IDLESEL;        
    volatile uint32_t POLSEL;         
    volatile uint32_t POLCTL;         
    volatile uint32_t STATUS;         
    volatile const  uint32_t DAT0;           
    volatile const  uint32_t DAT1;           
    volatile const  uint32_t DAT2;           
    volatile const  uint32_t DAT3;           
    volatile const  uint32_t DAT4;           
    volatile uint32_t INTEN;          
    volatile uint32_t TH0_1;          
    volatile uint32_t TH2_3;          
    volatile uint32_t TH4_5;          
    volatile uint32_t TH6_7;          
    volatile uint32_t TH8_9;          
    volatile uint32_t TH10_11;        
    volatile uint32_t TH12_13;        
    volatile uint32_t TH14_15;        
    volatile uint32_t TH16;           

} TK_T;






 

























































































































































































































































































































































































































































































   
   


 



 


typedef struct
{












































































































































































 

    volatile uint32_t CTL;            
    volatile uint32_t CMP;            
    volatile uint32_t INTSTS;         
    volatile const  uint32_t CNT;            
    volatile const  uint32_t CAP;            
    volatile uint32_t EXTCTL;         
    volatile uint32_t EINTSTS;        

} TIMER_T;






 





















































































   
   


 



 


typedef struct
{




































































































































































































































































































































































































































































































































































































































































 

    volatile uint32_t DAT;            
    volatile uint32_t INTEN;          
    volatile uint32_t FIFO;           
    volatile uint32_t LINE;           
    volatile uint32_t MODEM;          
    volatile uint32_t MODEMSTS;       
    volatile uint32_t FIFOSTS;        
    volatile uint32_t INTSTS;         
    volatile uint32_t TOUT;           
    volatile uint32_t BAUD;           
    volatile uint32_t IRDA;           
    volatile uint32_t ALTCTL;         
    volatile uint32_t FUNCSEL;        
    volatile uint32_t LINCTL;         
    volatile uint32_t LINSTS;         

} UART_T;






 
























































































































































































































































































































































   
   


 



 



 

typedef struct
{


































































 

    volatile uint32_t BUFSEG;         
    volatile uint32_t MXPLD;          
    volatile uint32_t CFG;            
    volatile uint32_t CFGP;           

} USBD_EP_T;





typedef struct
{































































































































































































































 

    volatile uint32_t INTEN;          
    volatile uint32_t INTSTS;         
    volatile uint32_t FADDR;          
    volatile const  uint32_t EPSTS;          
    volatile uint32_t ATTR;           
    volatile const  uint32_t VBUSDET;        
    volatile uint32_t STBUFSEG;       
    volatile const  uint32_t RESERVE0[29]; 
    volatile uint32_t SE0;            
    volatile const  uint32_t RESERVE1[283];
    USBD_EP_T     EP[8];          

} USBD_T;






 


























































































































































   
   


 



 


typedef struct
{































































































































































































































































































































































































































































































































 

    volatile const  uint32_t HcRevision;     
    volatile uint32_t HcControl;      
    volatile uint32_t HcCommandStatus;  
    volatile uint32_t HcInterruptStatus;  
    volatile uint32_t HcInterruptEnable;  
    volatile uint32_t HcInterruptDisable;  
    volatile uint32_t HcHCCA;         
    volatile uint32_t HcPeriodCurrentED;  
    volatile uint32_t HcControlHeadED;  
    volatile uint32_t HcControlCurrentED;  
    volatile uint32_t HcBulkHeadED;   
    volatile uint32_t HcBulkCurrentED;  
    volatile uint32_t HcDoneHead;     
    volatile uint32_t HcFmInterval;   
    volatile const  uint32_t HcFmRemaining;  
    volatile const  uint32_t HcFmNumber;     
    volatile uint32_t HcPeriodicStart;  
    volatile uint32_t HcLSThreshold;  
    volatile uint32_t HcRhDescriptorA;  
    volatile uint32_t HcRhDescriptorB;  
    volatile uint32_t HcRhStatus;     
    volatile uint32_t HcRhPortStatus[2];  
    volatile const  uint32_t RESERVE0[105];
    volatile uint32_t HcPhyControl;   
    volatile uint32_t HcMiscControl;  

} USBH_T;







 




























































































































































































































   
   


 



 


typedef struct
{



















































































 

    volatile uint32_t CTL;            
    volatile uint32_t ALTCTL;         

} WDT_T;






 


































   
   


 



 


typedef struct
{











































































 

    volatile  uint32_t RLDCNT;         
    volatile uint32_t CTL;            
    volatile uint32_t STATUS;         
    volatile const  uint32_t CNT;            

} WWDT_T;






 




























   
   


   


 
 
 


 

 




 



 
# 16846 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
# 16861 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
# 16874 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
   


 
 
 


 


# 16900 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"







# 16928 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
# 16962 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 










# 16980 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"





# 1 "Library\\StdDriver\\inc\\sys.h"
 








 











 



 



 


 
 
 





# 60 "Library\\StdDriver\\inc\\sys.h"








 
 
 
# 77 "Library\\StdDriver\\inc\\sys.h"


 
 
 






 
 
 







 
 
 






 

# 118 "Library\\StdDriver\\inc\\sys.h"


# 128 "Library\\StdDriver\\inc\\sys.h"


# 138 "Library\\StdDriver\\inc\\sys.h"


# 148 "Library\\StdDriver\\inc\\sys.h"




























































# 216 "Library\\StdDriver\\inc\\sys.h"


# 226 "Library\\StdDriver\\inc\\sys.h"


# 236 "Library\\StdDriver\\inc\\sys.h"


# 245 "Library\\StdDriver\\inc\\sys.h"


# 256 "Library\\StdDriver\\inc\\sys.h"


# 266 "Library\\StdDriver\\inc\\sys.h"


# 275 "Library\\StdDriver\\inc\\sys.h"


# 285 "Library\\StdDriver\\inc\\sys.h"









































# 335 "Library\\StdDriver\\inc\\sys.h"


# 345 "Library\\StdDriver\\inc\\sys.h"


# 353 "Library\\StdDriver\\inc\\sys.h"


# 361 "Library\\StdDriver\\inc\\sys.h"


# 369 "Library\\StdDriver\\inc\\sys.h"








# 383 "Library\\StdDriver\\inc\\sys.h"














































# 437 "Library\\StdDriver\\inc\\sys.h"


# 447 "Library\\StdDriver\\inc\\sys.h"


# 457 "Library\\StdDriver\\inc\\sys.h"


# 467 "Library\\StdDriver\\inc\\sys.h"


# 475 "Library\\StdDriver\\inc\\sys.h"


# 484 "Library\\StdDriver\\inc\\sys.h"


# 494 "Library\\StdDriver\\inc\\sys.h"


# 502 "Library\\StdDriver\\inc\\sys.h"



















































# 561 "Library\\StdDriver\\inc\\sys.h"


















# 585 "Library\\StdDriver\\inc\\sys.h"


# 593 "Library\\StdDriver\\inc\\sys.h"









# 610 "Library\\StdDriver\\inc\\sys.h"


# 620 "Library\\StdDriver\\inc\\sys.h"


# 630 "Library\\StdDriver\\inc\\sys.h"


# 640 "Library\\StdDriver\\inc\\sys.h"





















































   




 







 








 








 








 








 









 








 








 








 












 








 








 








 








 








 








 








 








 








 








 








 















 



 
 
 








 
static __inline void SYS_UnlockReg(void)
{
    do
    {
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x59;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x16;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x88;
    }
    while(((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL == 0);
}







 
static __inline void SYS_LockReg(void)
{
    ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0;
}


void SYS_ClearResetSrc(uint32_t u32Src);
uint32_t SYS_GetBODStatus(void);
uint32_t SYS_GetResetSrc(void);
uint32_t SYS_IsRegLocked(void);
uint32_t SYS_ReadPDID(void);
void SYS_ResetChip(void);
void SYS_ResetCPU(void);
void SYS_ResetModule(uint32_t u32ModuleIndex);
void SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel);
void SYS_DisableBOD(void);


   

   

   






# 16986 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\clk.h"









 










 



 



 


# 39 "Library\\StdDriver\\inc\\clk.h"


 
 
 






# 56 "Library\\StdDriver\\inc\\clk.h"








 
 
 




# 77 "Library\\StdDriver\\inc\\clk.h"

# 84 "Library\\StdDriver\\inc\\clk.h"

# 91 "Library\\StdDriver\\inc\\clk.h"

# 98 "Library\\StdDriver\\inc\\clk.h"















 
 
 






















 
 
 









 
 
 






 
 
 



 
 
 















 
 
 

 

# 199 "Library\\StdDriver\\inc\\clk.h"

# 208 "Library\\StdDriver\\inc\\clk.h"








































































































































   




 







 
static __inline uint32_t CLK_GetPLLClockFreq(void)
{
    uint32_t u32PllFreq = 0, u32PllReg;
    uint32_t u32FIN, u32NF, u32NR, u32NO;
    uint8_t au8NoTbl[4] = {1, 2, 2, 4};

    u32PllReg = ((CLK_T *) ((0x40000000UL) + 0x00200))->PLLCTL;

    if(u32PllReg & ((0x1ul << (16)) | (0x1ul << (18))))
        return 0;            

    if(u32PllReg & 0x00080000UL)
        u32FIN = (22118400UL);     
    else
        u32FIN = (12000000UL);      

    if(u32PllReg & (0x1ul << (17)))
        return u32FIN;       

     
    u32NO = au8NoTbl[((u32PllReg & (0x3ul << (14))) >> (14))];
    u32NF = ((u32PllReg & (0x1fful << (0))) >> (0)) + 2;
    u32NR = ((u32PllReg & (0x1ful << (9))) >> (9)) + 2;

     
    u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);

    return u32PllFreq;
}









 
static __inline void CLK_SysTickDelay(uint32_t us)
{
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0);

     
    while((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16)) == 0);
    
     
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
}








 

static __inline void CLK_SysTickLongDelay(uint32_t us)
{
    uint32_t delay;
        
     
    delay = 233016UL;

    do
    {
        if(us > delay)
        {
            us -= delay;
        }
        else
        {
            delay = us;
            us = 0UL;
        }        
        
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = delay * CyclesPerUs;
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x0UL);
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0);

         
        while((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16)) == 0UL);

         
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0UL;
    
    }while(us > 0UL);
    
}


void CLK_DisableCKO(void);
void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En);
void CLK_PowerDown(void);
void CLK_Idle(void);
uint32_t CLK_GetHXTFreq(void);
uint32_t CLK_GetLXTFreq(void);
uint32_t CLK_GetHCLKFreq(void);
uint32_t CLK_GetPCLK0Freq(void);
uint32_t CLK_GetPCLK1Freq(void);
uint32_t CLK_GetCPUFreq(void);
uint32_t CLK_SetCoreClock(uint32_t u32Hclk);
void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc);
void CLK_EnableXtalRC(uint32_t u32ClkMask);
void CLK_DisableXtalRC(uint32_t u32ClkMask);
void CLK_EnableModuleClock(uint32_t u32ModuleIdx);
void CLK_DisableModuleClock(uint32_t u32ModuleIdx);
uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq);
void CLK_DisablePLL(void);
uint32_t CLK_WaitClockReady(uint32_t u32ClkMask);
void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count);
void CLK_DisableSysTick(void);



   

   

   





# 16987 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\gpio.h"
 









 











 



 



 





 
 
 






 
 
 







 
 
 




 
 
 






# 88 "Library\\StdDriver\\inc\\gpio.h"















 
# 192 "Library\\StdDriver\\inc\\gpio.h"


   




 













 














 













 














 














 














 














 















 































 










 











 










 

















 














 



void GPIO_SetMode(GPIO_T *port, uint32_t u32PinMask, uint32_t u32Mode);
void GPIO_EnableInt(GPIO_T *port, uint32_t u32Pin, uint32_t u32IntAttribs);
void GPIO_DisableInt(GPIO_T *port, uint32_t u32Pin);


   

   

   








 
# 16988 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\i2c.h"
 









 



# 1 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 

# 17038 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 



# 16 "Library\\StdDriver\\inc\\i2c.h"









 



 



 

 
 
 
# 47 "Library\\StdDriver\\inc\\i2c.h"

 
 
 



 
 
 





   



 









 










 










 










 











 










 











 











 










 











 











 












 












 












 












 












 











 












 











 











 











 











 











 











 


 
 
 








 
static __inline void I2C_STOP(I2C_T *i2c)
{

    (i2c)->CTL |= ((0x1ul << (3)) | (0x1ul << (4)));
    while(i2c->CTL & (0x1ul << (4)));
}

void I2C_ClearTimeoutFlag(I2C_T *i2c);
void I2C_Close(I2C_T *i2c);
void I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack);
void I2C_DisableInt(I2C_T *i2c);
void I2C_EnableInt(I2C_T *i2c);
uint32_t I2C_GetBusClockFreq(I2C_T *i2c);
uint32_t I2C_GetIntFlag(I2C_T *i2c);
uint32_t I2C_GetStatus(I2C_T *i2c);
uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock);
uint8_t I2C_GetData(I2C_T *i2c);
void I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode);
void I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask);
uint32_t I2C_SetBusClockFreq(I2C_T *i2c, uint32_t u32BusClock);
void I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout);
void I2C_DisableTimeout(I2C_T *i2c);
void I2C_EnableWakeup(I2C_T *i2c);
void I2C_DisableWakeup(I2C_T *i2c);
void I2C_SetData(I2C_T *i2c, uint8_t u8Data);

uint32_t I2C_SMBusGetStatus(I2C_T *i2c);
void I2C_SMBusClearInterruptFlag(I2C_T *i2c, uint8_t u8ClrSMBusIntFlag);
void I2C_SMBusSetPacketByteCount(I2C_T *i2c, uint32_t u32PktSize);
void I2C_SMBusOpen(I2C_T *i2c, uint8_t u8HostDevice);
void I2C_SMBusClose(I2C_T *i2c);
void I2C_SMBusPECTxEnable(I2C_T *i2c, uint8_t u8PECTxEn);
uint8_t I2C_SMBusGetPECValue(I2C_T *i2c);
void I2C_SMBusIdleTimeout(I2C_T *i2c, uint32_t us, uint32_t u32Hclk);
void I2C_SMBusTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
void I2C_SMBusClockLoTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
   

   

   

# 16989 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\crc.h"
 








 











 



 



 
 
 
 





 
 
 





 
 
 




   




 












 










 










 


void CRC_Open(uint32_t u32Mode, uint32_t u32Attribute, uint32_t u32Seed, uint32_t u32DataLen);
uint32_t CRC_GetChecksum(void);

   

   

   







 
# 16990 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\ebi.h"
 








 











 



 



 
 
 
 




 
 
 



 
 
 



 
 
 



 
 
 
# 65 "Library\\StdDriver\\inc\\ebi.h"

# 73 "Library\\StdDriver\\inc\\ebi.h"

   




 









 











 










 











 










 











 










 











 










 











 










 











 


void EBI_Open(uint32_t u32Bank, uint32_t u32DataWidth, uint32_t u32TimingClass, uint32_t u32BusMode, uint32_t u32CSActiveLevel);
void EBI_Close(uint32_t u32Bank);
void EBI_SetBusTiming(uint32_t u32Bank, uint32_t u32TimingConfig, uint32_t u32MclkDiv);

   

   

   







 
# 16991 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\rtc.h"
 








 











 



 



 
 
 
 



 
 
 





 
 
 
# 56 "Library\\StdDriver\\inc\\rtc.h"

 
 
 
# 67 "Library\\StdDriver\\inc\\rtc.h"

 
 
 






 
 
 




   




 


 
typedef struct
{
    uint32_t u32Year;            
    uint32_t u32Month;           
    uint32_t u32Day;             
    uint32_t u32DayOfWeek;       
    uint32_t u32Hour;            
    uint32_t u32Minute;          
    uint32_t u32Second;          
    uint32_t u32TimeScale;       
    uint32_t u32AmPm;            
} S_RTC_TIME_DATA_T;

   




 










 










 










 










 











 











 











 












 













 










 
static __inline void RTC_WaitAccessEnable(void)
{
     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == (0x1ul << (16)));
    ((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN = 0x0000A965UL;

     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == 0x0);
}

void RTC_Open(S_RTC_TIME_DATA_T *sPt);
void RTC_Close(void);
void RTC_32KCalibration(int32_t i32FrequencyX100);
void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek);
void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day);
void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
uint32_t RTC_GetDayOfWeek(void);
void RTC_SetTickPeriod(uint32_t u32TickSelection);
void RTC_EnableInt(uint32_t u32IntFlagMask);
void RTC_DisableInt(uint32_t u32IntFlagMask);
void RTC_EnableSpareAccess(void);
void RTC_DisableSpareRegister(void);
void RTC_EnableSnooperDetection(uint32_t u32PinCondition);
void RTC_DisableSnooperDetection(void);

   

   

   







 
# 16992 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\timer.h"
 








 











 



 



 
 
 
 
# 47 "Library\\StdDriver\\inc\\timer.h"

   




 













 












 











 













 










 
static __inline void TIMER_Start(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (30));
}









 
static __inline void TIMER_Stop(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (30));
}











 
static __inline void TIMER_EnableWakeup(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (23));
}









 
static __inline void TIMER_DisableWakeup(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (23));
}









 
static __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (6));
}









 
static __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (6));
}









 
static __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (7));
}









 
static __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (7));
}









 
static __inline void TIMER_EnableInt(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (29));
}









 
static __inline void TIMER_DisableInt(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (29));
}









 
static __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (5));
}









 
static __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (5));
}










 
static __inline uint32_t TIMER_GetIntFlag(TIMER_T *timer)
{
    return ((timer->INTSTS & (0x1ul << (0))) ? 1 : 0);
}









 
static __inline void TIMER_ClearIntFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (1))) | (0x1ul << (0));
}










 
static __inline uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
{
    return timer->EINTSTS;
}









 
static __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
{
    timer->EINTSTS = (0x1ul << (0));
}










 
static __inline uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
{
    return (timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
}









 
static __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (0))) | (0x1ul << (1));
}









 
static __inline uint32_t TIMER_GetCaptureData(TIMER_T *timer)
{
    return timer->CAP;
}









 
static __inline uint32_t TIMER_GetCounter(TIMER_T *timer)
{
    return timer->CNT;
}

uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq);
void TIMER_Close(TIMER_T *timer);
void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec);
void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge);
void TIMER_DisableCapture(TIMER_T *timer);
void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge);
void TIMER_DisableEventCounter(TIMER_T *timer);
uint32_t TIMER_GetModuleClock(TIMER_T *timer);

   

   

   







 
# 16993 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\wdt.h"
 








 











 



 



 
 
 
 
# 42 "Library\\StdDriver\\inc\\wdt.h"

 
 
 





   




 









 










 










 











 











 











 













 










 
static __inline void WDT_Close(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL = 0;
    return;
}









 
static __inline void WDT_EnableInt(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL |= (0x1ul << (6));
    return;
}









 
static __inline void WDT_DisableInt(void)
{
    
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL &= ~((0x1ul << (6)) | (0x1ul << (2)) | (0x1ul << (3)) | (0x1ul << (5)));
    return;
}

void WDT_Open(uint32_t u32TimeoutInterval, uint32_t u32ResetDelay, uint32_t u32EnableReset, uint32_t u32EnableWakeup);

   

   

   







 
# 16994 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\wwdt.h"
 








 











 



 



 
 
 
 
# 50 "Library\\StdDriver\\inc\\wwdt.h"

 
 
 


   




 









 










 











 











 










 













 


void WWDT_Open(uint32_t u32PreScale, uint32_t u32CmpValue, uint32_t u32EnableInt);

   

   

   







 
# 16995 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\spi.h"









 



 
 
 
# 18 "Library\\StdDriver\\inc\\spi.h"









 



 



 













 
# 61 "Library\\StdDriver\\inc\\spi.h"

 
# 71 "Library\\StdDriver\\inc\\spi.h"


 





 



 





 



 




 





 



 



 
# 120 "Library\\StdDriver\\inc\\spi.h"

   




 






 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 








 








 








 







 








 







 







 







 







 









 







 







 








 








 







 







 











 
static __inline void I2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL |= (0x1ul << (16));
    else
        i2s->I2SCTL |= (0x1ul << (17));
}









 
static __inline void I2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL &= ~(0x1ul << (16));
    else
        i2s->I2SCTL &= ~(0x1ul << (17));
}






 







 







 







 







 







 







 







 







 







 







 







 










 
static __inline void I2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
{
    u32Ch == (0x1ul << (23)) ?
    (i2s->I2SCTL |= (0x1ul << (23))) :
    (i2s->I2SCTL &= ~(0x1ul << (23)));
}







 







 








 









 







 







 




 
uint32_t SPI_Open(SPI_T *spi, uint32_t u32MasterSlave, uint32_t u32SPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
void SPI_Close(SPI_T *spi);
void SPI_ClearRxFIFO(SPI_T *spi);
void SPI_ClearTxFIFO(SPI_T *spi);
void SPI_DisableAutoSS(SPI_T *spi);
void SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
uint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock);
void SPI_SetFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
uint32_t SPI_GetBusClock(SPI_T *spi);
void SPI_EnableInt(SPI_T *spi, uint32_t u32Mask);
void SPI_DisableInt(SPI_T *spi, uint32_t u32Mask);
uint32_t SPI_GetIntFlag(SPI_T *spi, uint32_t u32Mask);
void SPI_ClearIntFlag(SPI_T *spi, uint32_t u32Mask);
uint32_t SPI_GetStatus(SPI_T *spi, uint32_t u32Mask);

uint32_t I2S_Open(SPI_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat);
void I2S_Close(SPI_T *i2s);
void I2S_EnableInt(SPI_T *i2s, uint32_t u32Mask);
void I2S_DisableInt(SPI_T *i2s, uint32_t u32Mask);
uint32_t I2S_EnableMCLK(SPI_T *i2s, uint32_t u32BusClock);
void I2S_DisableMCLK(SPI_T *i2s);
void I2S_SetFIFO(SPI_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold);


   

   

   







 
# 16996 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\sc.h"
 








 











 



 



 
# 37 "Library\\StdDriver\\inc\\sc.h"

# 48 "Library\\StdDriver\\inc\\sc.h"


   




 





















 






















 











 
# 121 "Library\\StdDriver\\inc\\sc.h"











 
# 141 "Library\\StdDriver\\inc\\sc.h"










 
# 160 "Library\\StdDriver\\inc\\sc.h"










 
# 179 "Library\\StdDriver\\inc\\sc.h"







 









 









 








 
static __inline void SC_SetTxRetry(SC_T *sc, uint32_t u32Count)
{
    while((sc)->CTL & (0x1ul << (30)));
    if(u32Count == 0) {       
        (sc)->CTL &= ~((0x7ul << (20)) | (0x1ul << (23)));
    } else {
        (sc)->CTL = ((sc)->CTL & ~(0x7ul << (20))) | ((u32Count - 1) << (20)) | (0x1ul << (23));
    }
}







 
static __inline void  SC_SetRxRetry(SC_T *sc, uint32_t u32Count)
{
    while((sc)->CTL & (0x1ul << (30)));
    if(u32Count == 0) {       
        (sc)->CTL &= ~((0x7ul << (16)) | (0x1ul << (19)));
    } else {
        (sc)->CTL = ((sc)->CTL & ~(0x7ul << (16))) | ((u32Count - 1) << (16)) | (0x1ul << (19));
    }
}


uint32_t SC_IsCardInserted(SC_T *sc);
void SC_ClearFIFO(SC_T *sc);
void SC_Close(SC_T *sc);
void SC_Open(SC_T *sc, uint32_t u32CardDet, uint32_t u32PWR);
void SC_ResetReader(SC_T *sc);
void SC_SetBlockGuardTime(SC_T *sc, uint32_t u32BGT);
void SC_SetCharGuardTime(SC_T *sc, uint32_t u32CGT);
void SC_StopAllTimer(SC_T *sc);
void SC_StartTimer(SC_T *sc, uint32_t u32TimerNum, uint32_t u32Mode, uint32_t u32ETUCount);
void SC_StopTimer(SC_T *sc, uint32_t u32TimerNum);


   

   

   







 

# 16997 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\scuart.h"
 








 











 



 



 













   




 

 







 











 









 









 










 









 



 







 










 










 










 









 


 













 














 
















 













 












 













 


void SCUART_Close(SC_T* sc);
uint32_t SCUART_Open(SC_T* sc, uint32_t u32baudrate);
uint32_t SCUART_Read(SC_T* sc, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
uint32_t SCUART_SetLineConfig(SC_T* sc, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t  u32StopBits);
void SCUART_SetTimeoutCnt(SC_T* sc, uint32_t u32TOC);
void SCUART_Write(SC_T* sc, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);

   

   

   







 
# 16998 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\acmp.h"
 









 



 
 
 
# 19 "Library\\StdDriver\\inc\\acmp.h"









 



 




 



 
 
 
# 65 "Library\\StdDriver\\inc\\acmp.h"

 
 
 




   




 

 
 
 








 








 













 








 








 









 








 








 








 








 








 








 








 








 








 













 








 








 

















 











 










 












 




 
void ACMP_Open(ACMP_T *, uint32_t u32ChNum, uint32_t u32NegSrc, uint32_t u32HysteresisEn);
void ACMP_Close(ACMP_T *, uint32_t u32ChNum);



   

   

   








 
# 16999 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\eadc.h"









 



 
 
 
# 18 "Library\\StdDriver\\inc\\eadc.h"










 



 



 

 
 
 






# 55 "Library\\StdDriver\\inc\\eadc.h"

 
 
 




# 85 "Library\\StdDriver\\inc\\eadc.h"







 
 
 
# 101 "Library\\StdDriver\\inc\\eadc.h"

   



 
 
 
 






 









 







 









 








 








 








 










 









 










 










 










 










 










 








 








 








 








 








 










 








 










 









 








 








 








 








 








 















 
# 404 "Library\\StdDriver\\inc\\eadc.h"














 
# 428 "Library\\StdDriver\\inc\\eadc.h"














 
# 452 "Library\\StdDriver\\inc\\eadc.h"














 
# 476 "Library\\StdDriver\\inc\\eadc.h"







 








 










 








 







 







 







 







 


 
 
 
void EADC_Open(EADC_T *eadc, uint32_t u32InputMode);
void EADC_Close(EADC_T *eadc);
void EADC_ConfigSampleModule(EADC_T *eadc, uint32_t u32ModuleNum, uint32_t u32TriggerSource, uint32_t u32Channel);
void EADC_SetTriggerDelayTime(EADC_T *eadc, uint32_t u32ModuleNum, uint32_t u32TriggerDelayTime, uint32_t u32DelayClockDivider);
void EADC_SetInternalSampleTime(EADC_T *eadc, uint32_t u32SampleTime);
void EADC_SetExtendSampleTime(EADC_T *eadc, uint32_t u32ModuleNum, uint32_t u32ExtendSampleTime);

   

   

   







 
# 17000 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\dac.h"









 



 
 
 
# 18 "Library\\StdDriver\\inc\\dac.h"










 



 




 

 
 
 



# 57 "Library\\StdDriver\\inc\\dac.h"





   




 
 
 
 






 







 







 








 







 








 








 







 







 







 







 










 








 









 









 








 








 







 


void DAC_Open(DAC_T *dac, uint32_t u32Ch, uint32_t u32TrgSrc);
void DAC_Close(DAC_T *dac, uint32_t u32Ch);
float DAC_SetDelayTime(DAC_T *dac, uint32_t u16Delay);

   

   

   







 
# 17001 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\can.h"
 









 



# 16 "Library\\StdDriver\\inc\\can.h"









 



 



 
 
 
 



 
 
 



 
 
 



 
 
 
typedef struct
{
    uint32_t  IdType;
    uint32_t  FrameType;
    uint32_t  Id;
    uint8_t   DLC;
    uint8_t   Data[8];
} STR_CANMSG_T;

 
 
 
typedef struct
{
    uint8_t   u8Xtd;
    uint8_t   u8Dir;
    uint32_t  u32Id;
    uint8_t   u8IdType;
} STR_CANMASK_T;




   




 










 











 










 










 












 



 
 
 
uint32_t CAN_SetBaudRate(CAN_T *tCAN, uint32_t u32BaudRate);
uint32_t CAN_Open(CAN_T *tCAN, uint32_t u32BaudRate, uint32_t u32Mode);
void CAN_Close(CAN_T *tCAN);
void CAN_CLR_INT_PENDING_BIT(CAN_T *tCAN, uint8_t u32MsgNum);
void CAN_EnableInt(CAN_T *tCAN, uint32_t u32Mask);
void CAN_DisableInt(CAN_T *tCAN, uint32_t u32Mask);
int32_t CAN_Transmit(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_Receive(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_SetMultiRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32MsgCount, uint32_t u32IDType, uint32_t u32ID);
int32_t CAN_SetRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32IDType, uint32_t u32ID);
int32_t CAN_SetRxMsgAndMsk(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32IDType, uint32_t u32ID, uint32_t u32IDMask);
int32_t CAN_SetTxMsg(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_TriggerTxMsg(CAN_T  *tCAN, uint32_t u32MsgNum);


   

   

   







 
# 17002 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\usbd.h"








 






 



 



 
typedef struct s_usbd_info
{
    const uint8_t *gu8DevDesc;             
    const uint8_t *gu8ConfigDesc;          
    const uint8_t **gu8StringDesc;         
    const uint8_t **gu8HidReportDesc;      
    const uint32_t *gu32HidReportSize;     
    const uint32_t *gu32ConfigHidDescIdx;  	

} S_USBD_INFO_T;

extern const S_USBD_INFO_T gsInfo;

   






 



# 57 "Library\\StdDriver\\inc\\usbd.h"


 




 
# 76 "Library\\StdDriver\\inc\\usbd.h"

 
# 85 "Library\\StdDriver\\inc\\usbd.h"

 



 
# 97 "Library\\StdDriver\\inc\\usbd.h"

 







 



 
 
 














# 140 "Library\\StdDriver\\inc\\usbd.h"
















   




 










 












 












 











 











 











 











 











 











 











 














 











 














 











 















 












 











 












 












 













 











 













 













 











 











 










 












 















 
static __inline void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
{
    while(size--) *dest++ = *src++;
}











 
static __inline void USBD_SetStall(uint8_t epnum)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg | (0x1ul << (1)));
            break;
        }
    }
}









 
static __inline void USBD_ClearStall(uint8_t epnum)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg & ~(0x1ul << (1)));
            break;
        }
    }
}











 
static __inline uint32_t USBD_GetStall(uint8_t epnum)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            break;
        }
    }

    return ((*((volatile uint32_t *)(u32CfgAddr))) & (0x1ul << (1)));
}


extern volatile uint8_t g_usbd_RemoteWakeupEn;


typedef void (*VENDOR_REQ)(void);            
typedef void (*CLASS_REQ)(void);             
typedef void (*SET_INTERFACE_REQ)(void);     
typedef void (*SET_CONFIG_CB)(void);        


 
void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface);
void USBD_Start(void);
void USBD_GetSetupPacket(uint8_t *buf);
void USBD_ProcessSetupPacket(void);
void USBD_StandardRequest(void);
void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size);
void USBD_CtrlIn(void);
void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size);
void USBD_CtrlOut(void);
void USBD_SwReset(void);
void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq);
void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback);
void USBD_LockEpStall(uint32_t u32EpBitmap);

   

   

   




 
# 17003 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\fmc.h"
 









 



# 16 "Library\\StdDriver\\inc\\fmc.h"









 



 



 

 
 
 


 
 
 












 
 
 



 
 
 
# 75 "Library\\StdDriver\\inc\\fmc.h"

 
 
 






   



 

 
 
 









 











 












 











 












 











 













 











 













 











 


 
 
 











 
static __inline void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x21;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = u32Data;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}













 
static __inline void FMC_Write8(uint32_t u32Addr, uint32_t u32Data0, uint32_t u32Data1)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x61;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = u32Data0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = u32Data1;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}











 
static __inline uint32_t FMC_Read(uint32_t u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x00;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline int32_t FMC_Erase(uint32_t u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x22;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

     
    if(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL & (0x1ul << (6)))
    {
        ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL |= (0x1ul << (6));
        return -1;
    }
    return 0;
}










 
static __inline uint32_t FMC_ReadUID(uint8_t u8Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (u8Index << 2);
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadCID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0B;            
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x0;                           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));           



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0))) ;   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadPID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0C;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x04;                          
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadUCID(uint32_t u32Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (0x04 * u32Index) + 0x10;      
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}













 
static __inline void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2E;  
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32PageAddr;        
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;                



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);               
}













 
static __inline uint32_t FMC_GetVECMAP(void)
{
    return (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x7ffful << (9)));
}











 
static __inline uint32_t FMC_GetCheckSum(uint32_t u32Addr, int32_t i32Size)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = i32Size;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;
    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline void FMC_Write256(uint32_t u32Addr, uint32_t *pu32Buf)
{
    int32_t i, idx;
    volatile uint32_t *pu32IspData;
    

    
    idx = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x27;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;

retrigger:

    
    

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = pu32Buf[idx + 0];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = pu32Buf[idx + 1];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT2 = pu32Buf[idx + 2];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT3 = pu32Buf[idx + 3];



    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;

    pu32IspData = &((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0;
    idx += 4;

    for(i = idx; i < 256 / 4; i += 4) 
    {

        __set_PRIMASK(1); 
        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (4)));

        
        pu32IspData[0] = pu32Buf[i  ];
        pu32IspData[1] = pu32Buf[i + 1];

        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (6)));

        
        pu32IspData[2] = pu32Buf[i + 2];
        pu32IspData[3] = pu32Buf[i + 3];
        __set_PRIMASK(0);
    }

    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x1ul << (0)));
}

void FMC_Open(void);
void FMC_Close(void);
void FMC_EnableAPUpdate(void);
void FMC_DisableAPUpdate(void);
void FMC_EnableConfigUpdate(void);
void FMC_DisableConfigUpdate(void);
void FMC_EnableLDUpdate(void);
void FMC_DisableLDUpdate(void);
int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count);
int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count);
void FMC_SetBootSource(int32_t i32BootSrc);
int32_t FMC_GetBootSource(void);
uint32_t FMC_ReadDataFlashBaseAddr(void);
void FMC_EnableFreqOptimizeMode(uint32_t u32Mode);
void FMC_DisableFreqOptimizeMode(void);
   

   

   








# 17004 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\uart.h"









 












 



 



 

 
 
 






 
 
 











 
 
 
















 
 
 




 
 
 




 
 
 






 
 
 
# 107 "Library\\StdDriver\\inc\\uart.h"


 
 
 




   




 











 












 












 











 












 












 













 











 












 












 












 












 












 






















 






















 



































 











 
static __inline void UART_CLEAR_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9));
    uart->MODEM &= ~(0x1ul << (1));
}










 
static __inline void UART_SET_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9)) | (0x1ul << (1));
}










 












 



void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag);
void UART_Close(UART_T* uart);
void UART_DisableFlowCtrl(UART_T* uart);
void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag);
void UART_EnableFlowCtrl(UART_T* uart);
void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag);
void UART_Open(UART_T* uart, uint32_t u32baudrate);
uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits);
void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC);
void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction);
void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr);
void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength);
uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);




   

   

   







 
# 17005 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\pwm.h"
 








 











 



 



 
# 38 "Library\\StdDriver\\inc\\pwm.h"

 
 
 




 
 
 



 
 
 





 
 
 
# 79 "Library\\StdDriver\\inc\\pwm.h"






 
 
 
# 96 "Library\\StdDriver\\inc\\pwm.h"

# 105 "Library\\StdDriver\\inc\\pwm.h"




 
 
 







 
 
 



 
 
 
# 136 "Library\\StdDriver\\inc\\pwm.h"

 
 
 




 
 
 
# 153 "Library\\StdDriver\\inc\\pwm.h"

 
 
 
# 165 "Library\\StdDriver\\inc\\pwm.h"

 
 
 







   




 







 








 








 








 










 










 
# 247 "Library\\StdDriver\\inc\\pwm.h"









 









 









 












 
















 











 











 












 













 
# 366 "Library\\StdDriver\\inc\\pwm.h"









 










 










 






























 
# 441 "Library\\StdDriver\\inc\\pwm.h"












 












 




 
 
 
uint32_t PWM_ConfigCaptureChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
uint32_t PWM_ConfigOutputChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
void PWM_Start(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_Stop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_ForceStop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
void PWM_DisableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
uint32_t PWM_GetADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDACTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
void PWM_DisableDACTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearDACTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
uint32_t PWM_GetDACTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableFaultBrake(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32LevelMask, uint32_t u32BrakeSource);
void PWM_EnableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnablePDMA(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32RisingFirst, uint32_t u32Mode);
void PWM_DisablePDMA(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Duration);
void PWM_DisableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_DisableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_ClearCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
uint32_t PWM_GetCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
void PWM_DisableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_DisableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
uint32_t PWM_GetFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_EnablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
void PWM_DisablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_DisableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableAcc(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntFlagCnt, uint32_t u32IntAccSrc);
void PWM_DisableAcc(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_DisableAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearFTDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetFTDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_DisableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_ConfigSyncPhase(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32SyncSrc, uint32_t u32Direction, uint32_t u32StartPhase);
void PWM_EnableSyncPhase(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableSyncPhase(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableSyncNoiseFilter(PWM_T *pwm, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
void PWM_DisableSyncNoiseFilter(PWM_T *pwm);
void PWM_EnableSyncPinInverse(PWM_T *pwm);
void PWM_DisableSyncPinInverse(PWM_T *pwm);
void PWM_SetClockSource(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
void PWM_EnableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
void PWM_DisableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_EnableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_DisableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_SetBrakePinSource(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32SelAnotherModule);
uint32_t PWM_GetWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);


   

   

   







 
# 17006 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\pdma.h"
 








 











 



 



 


 
 
 




 
 
 




 
 
 





 
 
 



# 69 "Library\\StdDriver\\inc\\pdma.h"

 
 
 
# 96 "Library\\StdDriver\\inc\\pdma.h"

 
 
 





   



 









 










 










 










 










 










 










 











 











 











 











 











 











 










 


 
 
 
void PDMA_Open(uint32_t u32Mask);
void PDMA_Close(void);
void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount);
void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl);
void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr);
void PDMA_SetBurstType(uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize);
void PDMA_EnableTimeout(uint32_t u32Mask);
void PDMA_DisableTimeout(uint32_t u32Mask);
void PDMA_SetTimeOut(uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt);
void PDMA_Trigger(uint32_t u32Ch);
void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask);
void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask);


   

   

   







 
# 17007 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\tk.h"
 









 



# 16 "Library\\StdDriver\\inc\\tk.h"









 



 



 
















# 58 "Library\\StdDriver\\inc\\tk.h"













# 91 "Library\\StdDriver\\inc\\tk.h"


   




 








 








 









 










 







 











 











 
















 







 







 








 




























 



























 



 
 
 
void TK_Open(void);
void TK_Close(void);
void TK_SetScanMode(uint32_t u32Mode);
void TK_ConfigSensitivity(uint32_t u32PulseWidth, uint32_t u32SenseCnt, uint32_t u32AVCCHSel);
void TK_SetCapBankPol(uint32_t u32CapBankPolSel);
void TK_EnableTkPolarity(uint32_t u32Mask);
void TK_DisableTkPolarity(uint32_t u32Mask);
void TK_SetCompCapBankData(uint32_t u32TKNum, uint32_t u32CapData);
void TK_SetTkPol(uint32_t u32Mask, uint32_t u32PolSel);
void TK_SetRefKeyCapBankData(uint32_t u32CapData);
void TK_SetScanThreshold(uint32_t u32TKNum, uint32_t u32HighLevel, uint32_t u32LowLevel);
void TK_EnableInt(uint32_t u32Msk);
void TK_DisableInt(uint32_t u32Msk);


   

   

   







 
# 17008 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
# 1 "Library\\StdDriver\\inc\\otg.h"
 









 



 
 
 
# 19 "Library\\StdDriver\\inc\\otg.h"









 



 




 



 
 
 






   




 

 
 
 







 







 








 







 







 







 







 







 









 









 




















 




















 




















 




















 













 




   

   

   








 
# 17009 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

typedef volatile unsigned char  vu8;
typedef volatile unsigned long  vu32;
typedef volatile unsigned short vu16;




# 17023 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

# 17030 "Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

   







 



# 12 "Library\\StdDriver\\src\\can.c"



 



 



 






static uint8_t gu8LockCanIf[1][2] = {0};    




# 43 "Library\\StdDriver\\src\\can.c"


static int can_update_spt(int sampl_pt, int tseg, int *tseg1, int *tseg2);








static int can_update_spt(int sampl_pt, int tseg, int *tseg1, int *tseg2)
{
    *tseg2 = tseg + 1 - (sampl_pt * (tseg + 1)) / 1000;
    if (*tseg2 < 1ul) {
        *tseg2 = 1ul;
    } else {
    }

    if (*tseg2 > 8ul) {
        *tseg2 = 8ul;
    } else {
    }

    *tseg1 = tseg - *tseg2;
    if (*tseg1 > 16ul) {
        *tseg1 = 16ul;
        *tseg2 = tseg - *tseg1;
    } else {
    }

    return 1000 * (tseg + 1 - *tseg2) / (tseg + 1);
}










 
static uint32_t LockIF(CAN_T *tCAN)
{
    uint32_t u32CanNo;
    uint32_t u32FreeIfNo;
    uint32_t u32IntMask;




    u32CanNo = 0;


    u32FreeIfNo = 2;

     
    u32IntMask = tCAN->CON & ((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3));
    tCAN->CON = tCAN->CON & ~((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3));

     
    if((tCAN->IF[0].CREQ & (0x1ul << 15)) == 0)
    {
        if(gu8LockCanIf[u32CanNo][0] == 0)
        {
            gu8LockCanIf[u32CanNo][0] = 1;
            u32FreeIfNo = 0;
        }
    }

     
    if(u32FreeIfNo == 2 && (tCAN->IF[1].CREQ & (0x1ul << 15)) == 0)
    {
        if(gu8LockCanIf[u32CanNo][1] == 0)
        {
            gu8LockCanIf[u32CanNo][1] = 1;
            u32FreeIfNo = 1;
        }
    }

     
    tCAN->CON |= u32IntMask;

    return u32FreeIfNo;
}










 
static uint32_t LockIF_TL(CAN_T *tCAN)
{
    uint32_t u32Count;
    uint32_t u32FreeIfNo;

    for(u32Count = 0; u32Count < (0x10000000); u32Count++)
    {
        if((u32FreeIfNo = LockIF(tCAN)) != 2)
            return u32FreeIfNo;
    }

    return u32FreeIfNo;
}







 
static void ReleaseIF(CAN_T *tCAN, uint32_t u32IfNo)
{
    uint32_t u32IntMask;
    uint32_t u32CanNo;

    if(u32IfNo >= 2)
        return;




    u32CanNo = 0;


     
    u32IntMask = tCAN->CON & ((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3));
    tCAN->CON = tCAN->CON & ~((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3));

    gu8LockCanIf[u32CanNo][u32IfNo] = 0;

     
    tCAN->CON |= u32IntMask;
}














 
void CAN_EnterInitMode(CAN_T *tCAN, uint8_t u8Mask)
{
    tCAN->CON = u8Mask | ((0x1ul << 0) | (0x1ul << 6));
}








 
void CAN_LeaveInitMode(CAN_T *tCAN)
{
    tCAN->CON &= (~((0x1ul << 0) | (0x1ul << 6)));
    while(tCAN->CON & (0x1ul << 0));  
}







 
void CAN_WaitMsg(CAN_T *tCAN)
{
    tCAN->STATUS = 0x0;  

    while(1)
    {
        if(tCAN->IF[1].MCON & (0x1ul << 15))    
        {
            ;
            break;
        }

        if(tCAN->STATUS & (0x1ul << 4))
            ;

        if(tCAN->STATUS & (0x7ul << 0))
        {
            ;
        }
    }
}






 
uint32_t CAN_GetCANBitRate(CAN_T *tCAN)
{
    uint8_t u8Tseg1, u8Tseg2;
    uint32_t u32Bpr;

    u8Tseg1 = (tCAN->BTIME & (0xFul << 8)) >> 8;
    u8Tseg2 = (tCAN->BTIME & (0x7ul << 12)) >> 12;
    u32Bpr  = (tCAN->BTIME & (0x3Ful << 0)) | (tCAN->BRPE << 6);

    return (SystemCoreClock / (u32Bpr + 1) / (u8Tseg1 + u8Tseg2 + 3));
}













 
void CAN_EnterTestMode(CAN_T *tCAN, uint8_t u8TestMask)
{
    tCAN->CON |= (0x1ul << 7);
    tCAN->TEST = u8TestMask;
}







 
void CAN_LeaveTestMode(CAN_T *tCAN)
{
    tCAN->CON |= (0x1ul << 7);
    tCAN->TEST &= ~((0x1ul << 4) | (0x1ul << 3) | (0x1ul << 2));
    tCAN->CON &= (~(0x1ul << 7));
}








 
uint32_t CAN_IsNewDataReceived(CAN_T *tCAN, uint8_t u8MsgObj)
{
    return (u8MsgObj < 16 ? tCAN->NDAT1 & (1 << u8MsgObj) : tCAN->NDAT2 & (1 << (u8MsgObj - 16)));
}











 
int32_t CAN_BasicSendMsg(CAN_T *tCAN, STR_CANMSG_T* pCanMsg)
{
    uint32_t i = 0;
    while(tCAN->IF[0].CREQ & (0x1ul << 15));

    tCAN->STATUS &= (~(0x1ul << 3));

    if(pCanMsg->IdType == 0)
    {
         
        tCAN->IF[0].ARB1 = 0;
        tCAN->IF[0].ARB2 = (((pCanMsg->Id) & 0x7FF) << 2) ;
    }
    else
    {
         
        tCAN->IF[0].ARB1 = (pCanMsg->Id) & 0xFFFF;
        tCAN->IF[0].ARB2 = ((pCanMsg->Id) & 0x1FFF0000) >> 16  | (0x1ul << 14);

    }

    if(pCanMsg->FrameType)
        tCAN->IF[0].ARB2 |= (0x1ul << 13);
    else
        tCAN->IF[0].ARB2 &= (~(0x1ul << 13));

    tCAN->IF[0].MCON = (tCAN->IF[0].MCON & (~(0xFul << 0))) | pCanMsg->DLC;
    tCAN->IF[0].DAT_A1 = ((uint16_t)pCanMsg->Data[1] << 8) | pCanMsg->Data[0];
    tCAN->IF[0].DAT_A2 = ((uint16_t)pCanMsg->Data[3] << 8) | pCanMsg->Data[2];
    tCAN->IF[0].DAT_B1 = ((uint16_t)pCanMsg->Data[5] << 8) | pCanMsg->Data[4];
    tCAN->IF[0].DAT_B2 = ((uint16_t)pCanMsg->Data[7] << 8) | pCanMsg->Data[6];

     
    tCAN->IF[0].CREQ &= (~(0x1ul << 15));
    if(tCAN->IF[0].CREQ & (0x1ul << 15))
    {
        ;
        return 0;
    }

    tCAN->IF[0].CREQ |= (0x1ul << 15);                          

    for(i = 0; i < 0xFFFFF; i++)
    {
        if((tCAN->IF[0].CREQ & (0x1ul << 15)) == 0)
            break;
    }

    if(i >= 0xFFFFF)
    {
        ;
        return 0;
    }

    return 1;
}










 
int32_t CAN_BasicReceiveMsg(CAN_T *tCAN, STR_CANMSG_T* pCanMsg)
{

    if((tCAN->IF[1].MCON & (0x1ul << 15)) == 0)    
    {
        return 0;
    }

    tCAN->STATUS &= (~(0x1ul << 4));

    tCAN->IF[1].CMASK = (0x1ul << 5)
                        | (0x1ul << 4)
                        | (0x1ul << 1)
                        | (0x1ul << 0);

    if((tCAN->IF[1].ARB2 & (0x1ul << 14)) == 0)
    {
         
        pCanMsg->IdType = 0;
        pCanMsg->Id = (tCAN->IF[1].ARB2 >> 2) & 0x07FF;

    }
    else
    {
         
        pCanMsg->IdType = 1;
        pCanMsg->Id  = (tCAN->IF[1].ARB2 & 0x1FFF) << 16;
        pCanMsg->Id |= (uint32_t)tCAN->IF[1].ARB1;
    }

    pCanMsg->FrameType = !((tCAN->IF[1].ARB2 & (0x1ul << 13)) >> 13);

    pCanMsg->DLC     = tCAN->IF[1].MCON & (0xFul << 0);
    pCanMsg->Data[0] = tCAN->IF[1].DAT_A1 & (0xFFul << 0);
    pCanMsg->Data[1] = (tCAN->IF[1].DAT_A1 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[2] = tCAN->IF[1].DAT_A2 & (0xFFul << 0);
    pCanMsg->Data[3] = (tCAN->IF[1].DAT_A2 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[4] = tCAN->IF[1].DAT_B1 & (0xFFul << 0);
    pCanMsg->Data[5] = (tCAN->IF[1].DAT_B1 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[6] = tCAN->IF[1].DAT_B2 & (0xFFul << 0);
    pCanMsg->Data[7] = (tCAN->IF[1].DAT_B2 & (0xFFul << 8)) >> 8;

    return 1;
}

















 
int32_t CAN_SetRxMsgObjAndMsk(CAN_T *tCAN, uint8_t u8MsgObj, uint8_t u8idType, uint32_t u32id, uint32_t u32idmask, uint8_t u8singleOrFifoLast)
{
    uint8_t u8MsgIfNum;

     
    if((u8MsgIfNum = LockIF_TL(tCAN)) == 2)
        return 0;

     
    tCAN->IF[u8MsgIfNum].CMASK = (0x1ul << 7) | (0x1ul << 6) | (0x1ul << 5) |
                                 (0x1ul << 4) | (0x1ul << 1) | (0x1ul << 0);

    if(u8idType == 0)     
    {
        tCAN->IF[u8MsgIfNum].ARB1 = 0;
        tCAN->IF[u8MsgIfNum].ARB2 = (0x1ul << 15) | (u32id & 0x7FF) << 2;
        tCAN->IF[u8MsgIfNum].MASK1 = 0;
        tCAN->IF[u8MsgIfNum].MASK2 = (0x1ul << 15) | (0x1ul << 14) | (u32idmask & 0x7FF) << 2;
    }
    else
    {
        tCAN->IF[u8MsgIfNum].ARB1 = u32id & 0xFFFF;
        tCAN->IF[u8MsgIfNum].ARB2 = (0x1ul << 15) | (0x1ul << 14) | (u32id & 0x1FFF0000) >> 16;
        tCAN->IF[u8MsgIfNum].MASK1 = u32idmask & 0xFFFF;
        tCAN->IF[u8MsgIfNum].MASK2 = (0x1ul << 15) | (0x1ul << 14) | (u32idmask & 0x1FFF0000) >> 16;
    }

    
    tCAN->IF[u8MsgIfNum].MCON = (0x1ul << 12) | (0x1ul << 10);
    if(u8singleOrFifoLast)
        tCAN->IF[u8MsgIfNum].MCON |= (0x1ul << 7);
    else
        tCAN->IF[u8MsgIfNum].MCON &= (~(0x1ul << 7));

    tCAN->IF[u8MsgIfNum].DAT_A1  = 0;
    tCAN->IF[u8MsgIfNum].DAT_A2  = 0;
    tCAN->IF[u8MsgIfNum].DAT_B1  = 0;
    tCAN->IF[u8MsgIfNum].DAT_B2  = 0;

    tCAN->IF[u8MsgIfNum].CREQ = 1 + u8MsgObj;
    ReleaseIF(tCAN, u8MsgIfNum);

    return 1;
}
















 
int32_t CAN_SetRxMsgObj(CAN_T *tCAN, uint8_t u8MsgObj, uint8_t u8idType, uint32_t u32id, uint8_t u8singleOrFifoLast)
{
    uint8_t u8MsgIfNum;

     
    if((u8MsgIfNum = LockIF_TL(tCAN)) == 2)
        return 0;

     
    tCAN->IF[u8MsgIfNum].CMASK = (0x1ul << 7) | (0x1ul << 6) | (0x1ul << 5) |
                                 (0x1ul << 4) | (0x1ul << 1) | (0x1ul << 0);

    if(u8idType == 0)     
    {
        tCAN->IF[u8MsgIfNum].ARB1 = 0;
        tCAN->IF[u8MsgIfNum].ARB2 = (0x1ul << 15) | (u32id & 0x7FF) << 2;
    }
    else
    {
        tCAN->IF[u8MsgIfNum].ARB1 = u32id & 0xFFFF;
        tCAN->IF[u8MsgIfNum].ARB2 = (0x1ul << 15) | (0x1ul << 14) | (u32id & 0x1FFF0000) >> 16;
    }

    
    tCAN->IF[u8MsgIfNum].MCON = (0x1ul << 12) | (0x1ul << 10);
    if(u8singleOrFifoLast)
        tCAN->IF[u8MsgIfNum].MCON |= (0x1ul << 7);
    else
        tCAN->IF[u8MsgIfNum].MCON &= (~(0x1ul << 7));

    tCAN->IF[u8MsgIfNum].DAT_A1  = 0;
    tCAN->IF[u8MsgIfNum].DAT_A2  = 0;
    tCAN->IF[u8MsgIfNum].DAT_B1  = 0;
    tCAN->IF[u8MsgIfNum].DAT_B2  = 0;

    tCAN->IF[u8MsgIfNum].CREQ = 1 + u8MsgObj;
    ReleaseIF(tCAN, u8MsgIfNum);

    return 1;
}












 
int32_t CAN_ReadMsgObj(CAN_T *tCAN, uint8_t u8MsgObj, uint8_t u8Release, STR_CANMSG_T* pCanMsg)
{
    uint8_t u8MsgIfNum;

    if(!CAN_IsNewDataReceived(tCAN, u8MsgObj))
        return 0;

     
    if((u8MsgIfNum = LockIF_TL(tCAN)) == 2)
        return 0;

    tCAN->STATUS &= (~(0x1ul << 4));

     
    tCAN->IF[u8MsgIfNum].CMASK = (0x1ul << 6)
                                 | (0x1ul << 5)
                                 | (0x1ul << 4)
                                 | (0x1ul << 3)
                                 | (u8Release ? (0x1ul << 2) : 0)
                                 | (0x1ul << 1)
                                 | (0x1ul << 0);

    tCAN->IF[u8MsgIfNum].CREQ = 1 + u8MsgObj;

    while(tCAN->IF[u8MsgIfNum].CREQ & (0x1ul << 15))
    {
         
    }

    if((tCAN->IF[u8MsgIfNum].ARB2 & (0x1ul << 14)) == 0)
    {
         
        pCanMsg->IdType = 0;
        pCanMsg->Id     = (tCAN->IF[u8MsgIfNum].ARB2 & (0x1FFFul << 0)) >> 2;
    }
    else
    {
         
        pCanMsg->IdType = 1;
        pCanMsg->Id  = (((tCAN->IF[u8MsgIfNum].ARB2) & 0x1FFF) << 16) | tCAN->IF[u8MsgIfNum].ARB1;
    }

    pCanMsg->DLC     = tCAN->IF[u8MsgIfNum].MCON & (0xFul << 0);
    pCanMsg->Data[0] = tCAN->IF[u8MsgIfNum].DAT_A1 & (0xFFul << 0);
    pCanMsg->Data[1] = (tCAN->IF[u8MsgIfNum].DAT_A1 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[2] = tCAN->IF[u8MsgIfNum].DAT_A2 & (0xFFul << 0);
    pCanMsg->Data[3] = (tCAN->IF[u8MsgIfNum].DAT_A2 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[4] = tCAN->IF[u8MsgIfNum].DAT_B1 & (0xFFul << 0);
    pCanMsg->Data[5] = (tCAN->IF[u8MsgIfNum].DAT_B1 & (0xFFul << 8)) >> 8;
    pCanMsg->Data[6] = tCAN->IF[u8MsgIfNum].DAT_B2 & (0xFFul << 0);
    pCanMsg->Data[7] = (tCAN->IF[u8MsgIfNum].DAT_B2 & (0xFFul << 8)) >> 8;

    ReleaseIF(tCAN, u8MsgIfNum);
    return 1;
}













 
uint32_t CAN_SetBaudRate(CAN_T *tCAN, uint32_t u32BaudRate)
{
    long rate;
    long best_error = 1000000000, error = 0;
    int best_tseg = 0, best_brp = 0, brp = 0;
    int tsegall, tseg = 0, tseg1 = 0, tseg2 = 0;
    int spt_error = 1000, spt = 0, sampl_pt;
    uint64_t clock_freq = (uint64_t)0;
    uint32_t sjw = (uint32_t)1;

    CAN_EnterInitMode(tCAN, (uint8_t) 0);

    SystemCoreClockUpdate();
    clock_freq = CLK_GetPCLK0Freq();

    if(u32BaudRate > (uint32_t)1000000)
    {
        u32BaudRate = (uint32_t)1000000;
    }

     
    if(u32BaudRate > (uint32_t)800000)
    {
        sampl_pt = (int)750;
    }
    else if(u32BaudRate > (uint32_t)500000)
    {
        sampl_pt = (int)800;
    }
    else
    {
        sampl_pt = (int)875;
    }

     
    for(tseg = (16ul + 8ul) * 2ul + 1ul; tseg >= (2ul + 1ul) * 2ul; tseg--)
    {
        tsegall = 1ul + tseg / 2ul;
         
        brp = clock_freq / (tsegall * u32BaudRate) + tseg % 2;
         
        brp = (brp / 1ul) * 1ul;

        if((brp < 1ul) || (brp > 1024ul))
        {
            continue;
        }
        rate = clock_freq / (brp * tsegall);

        error = u32BaudRate - rate;

         
        if(error < 0)
        {
            error = -error;
        }
        if(error > best_error)
        {
            continue;
        }
        best_error = error;
        if(error == 0)
        {
            spt = can_update_spt(sampl_pt, tseg / 2, &tseg1, &tseg2);
            error = sampl_pt - spt;
            if(error < 0)
            {
                error = -error;
            }
            if(error > spt_error)
            {
                continue;
            }
            spt_error = error;
        }
        best_tseg = tseg / 2;
        best_brp = brp;

        if(error == 0)
        {
            break;
        }
    }

    spt = can_update_spt(sampl_pt, best_tseg, &tseg1, &tseg2);

     
     
    if(sjw > 4ul)
    {
        sjw = 4ul;
    }
     
    if(tseg2 < sjw)
    {
        sjw = tseg2;
    }

     
    u32BaudRate = clock_freq / (best_brp * (tseg1 + tseg2 + 1));

    tCAN->BTIME = ((uint32_t)(tseg2 - 1ul) << 12) | ((uint32_t)(tseg1 - 1ul) << 8) |
                  ((uint32_t)(best_brp - 1ul) & (0x3Ful << 0)) | (sjw << 6);
    tCAN->BRPE  = ((uint32_t)(best_brp - 1ul) >> 6) & 0x0Ful;

     

    CAN_LeaveInitMode(tCAN);

    return u32BaudRate;
}









 
void CAN_Close(CAN_T *tCAN)
{
    CAN_DisableInt(tCAN, ((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3)));
}













 
uint32_t CAN_Open(CAN_T *tCAN, uint32_t u32BaudRate, uint32_t u32Mode)
{
    uint32_t u32CurrentBitRate;

    u32CurrentBitRate = CAN_SetBaudRate(tCAN, u32BaudRate);

    if(u32Mode == 1)
        CAN_EnterTestMode(tCAN, (0x1ul << 2));

    return u32CurrentBitRate;
}













 
int32_t CAN_SetTxMsg(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg)
{
    uint8_t u8MsgIfNum;

    if((u8MsgIfNum = LockIF_TL(tCAN)) == 2)
        return 0;

     
    tCAN->IF[u8MsgIfNum].CMASK = (0x1ul << 7) | (0x1ul << 6) | (0x1ul << 5) |
                                 (0x1ul << 4) | (0x1ul << 1)  | (0x1ul << 0);

    if(pCanMsg->IdType == 0)
    {
         
        tCAN->IF[u8MsgIfNum].ARB1 = 0;
        tCAN->IF[u8MsgIfNum].ARB2 = (((pCanMsg->Id) & 0x7FF) << 2) | (0x1ul << 13) | (0x1ul << 15);
    }
    else
    {
         
        tCAN->IF[u8MsgIfNum].ARB1 = (pCanMsg->Id) & 0xFFFF;
        tCAN->IF[u8MsgIfNum].ARB2 = ((pCanMsg->Id) & 0x1FFF0000) >> 16 |
                                    (0x1ul << 13) | (0x1ul << 14) | (0x1ul << 15);
    }

    if(pCanMsg->FrameType)
        tCAN->IF[u8MsgIfNum].ARB2 |=   (0x1ul << 13);
    else
        tCAN->IF[u8MsgIfNum].ARB2 &= (~(0x1ul << 13));

    tCAN->IF[u8MsgIfNum].DAT_A1 = ((uint16_t)pCanMsg->Data[1] << 8) | pCanMsg->Data[0];
    tCAN->IF[u8MsgIfNum].DAT_A2 = ((uint16_t)pCanMsg->Data[3] << 8) | pCanMsg->Data[2];
    tCAN->IF[u8MsgIfNum].DAT_B1 = ((uint16_t)pCanMsg->Data[5] << 8) | pCanMsg->Data[4];
    tCAN->IF[u8MsgIfNum].DAT_B2 = ((uint16_t)pCanMsg->Data[7] << 8) | pCanMsg->Data[6];

    tCAN->IF[u8MsgIfNum].MCON   =  (0x1ul << 15) | pCanMsg->DLC | (0x1ul << 11) | (0x1ul << 7);
    tCAN->IF[u8MsgIfNum].CREQ   = 1 + u32MsgNum;

    ReleaseIF(tCAN, u8MsgIfNum);
    return 1;
}










 
int32_t CAN_TriggerTxMsg(CAN_T  *tCAN, uint32_t u32MsgNum)
{
    uint8_t u8MsgIfNum;

    if((u8MsgIfNum = LockIF_TL(tCAN)) == 2)
        return 0;

    tCAN->STATUS &= (~(0x1ul << 3));

     
    tCAN->IF[u8MsgIfNum].CMASK = (0x1ul << 3)
                                 | (0x1ul << 2);

    tCAN->IF[u8MsgIfNum].CREQ = 1 + u32MsgNum;

    while(tCAN->IF[u8MsgIfNum].CREQ & (0x1ul << 15))
    {
         
    }
    tCAN->IF[u8MsgIfNum].CMASK  = (0x1ul << 7) | (0x1ul << 2);
    tCAN->IF[u8MsgIfNum].CREQ  = 1 + u32MsgNum;

    ReleaseIF(tCAN, u8MsgIfNum);
    return 1;
}














 
void CAN_EnableInt(CAN_T *tCAN, uint32_t u32Mask)
{
    tCAN->CON = (tCAN->CON & ~((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3))) |
                (u32Mask & ((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3)));
}













 
void CAN_DisableInt(CAN_T *tCAN, uint32_t u32Mask)
{
    tCAN->CON = tCAN->CON & ~((u32Mask & ((0x1ul << 1) | (0x1ul << 2) | (0x1ul << 3))));
}

















 
int32_t CAN_SetRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32IDType, uint32_t u32ID)
{
    uint32_t u32TimeOutCount = 0;

    while(CAN_SetRxMsgObj(tCAN, u32MsgNum, u32IDType, u32ID, 1) == 0)
    {
        if(++u32TimeOutCount >= (0x10000000)) return 0;
    }

    return 1;
}

















 
int32_t CAN_SetRxMsgAndMsk(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32IDType, uint32_t u32ID, uint32_t u32IDMask)
{
    uint32_t u32TimeOutCount = 0;

    while(CAN_SetRxMsgObjAndMsk(tCAN, u32MsgNum, u32IDType, u32ID, u32IDMask, 1) == 0)
    {
        if(++u32TimeOutCount >= (0x10000000)) return 0;
    }

    return 1;
}

















 
int32_t CAN_SetMultiRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32MsgCount, uint32_t u32IDType, uint32_t u32ID)
{
    uint32_t i = 0;
    uint32_t u32TimeOutCount;
    uint32_t u32EOB_Flag = 0;

    for(i = 1; i < u32MsgCount; i++)
    {
        u32TimeOutCount = 0;

        u32MsgNum += (i - 1);

        if(i == u32MsgCount) u32EOB_Flag = 1;

        while(CAN_SetRxMsgObj(tCAN, u32MsgNum, u32IDType, u32ID, u32EOB_Flag) == 0)
        {
            if(++u32TimeOutCount >= (0x10000000)) return 0;
        }
    }

    return 1;
}














 
int32_t CAN_Transmit(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg)
{
    if((tCAN->CON & (0x1ul << 7)) && (tCAN->TEST & (0x1ul << 2)))
    {
        return (CAN_BasicSendMsg(tCAN, pCanMsg));
    }
    else
    {
        if(CAN_SetTxMsg(tCAN, u32MsgNum, pCanMsg) == 0)
            return 0;
        CAN_TriggerTxMsg(tCAN, u32MsgNum);
    }

    return 1;
}













 
int32_t CAN_Receive(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg)
{
    if((tCAN->CON & (0x1ul << 7)) && (tCAN->TEST & (0x1ul << 2)))
    {
        return (CAN_BasicReceiveMsg(tCAN, pCanMsg));
    }
    else
    {
        return CAN_ReadMsgObj(tCAN, u32MsgNum, 1, pCanMsg);
    }
}









 
void CAN_CLR_INT_PENDING_BIT(CAN_T *tCAN, uint8_t u32MsgNum)
{
    uint32_t u32MsgIfNum;

    if((u32MsgIfNum = LockIF_TL(tCAN)) == 2)
        u32MsgIfNum = 0;

    tCAN->IF[u32MsgIfNum].CMASK = (0x1ul << 3) | (0x1ul << 2);
    tCAN->IF[u32MsgIfNum].CREQ = 1 + u32MsgNum;

    ReleaseIF(tCAN, u32MsgIfNum);
}


   

   

   

 

